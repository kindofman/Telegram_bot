from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types
from aiogram.dispatcher import FSMContext

import db_wrapper
from loader import dp, db, bot
from typing import Callable
from datetime import datetime


DATE = "date"
DATE_STARTS = "20"


# States
class Player(StatesGroup):
    start = State() # –ë–ª–∏–∂–∞–π—à–∞—è –∏–≥—Ä–∞, –ú–∞—Ñ–∏—è, –ù–∞—Å—Ç–æ–ª–∫–∏
    select_date = State() # –î–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä
    nickname = State()  # Will be represented in storage as 'Form:nickname'
    unregister = State()
    nearest_game = State()
    mafia = State()
    board_games = State()
    spy = State()

class Admin(StatesGroup):
    change_info = State()
    max_number = State()
    reset = State()
    register_player = State()
    main = State() # –ù–æ–≤–∞—è –∏–≥—Ä–∞, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –º–∞—Ñ–∏—è, —à–ø–∏–æ–Ω
    new_game = State() # –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É, –ò–∑–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É
    create_game = State() # –¥–∞—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã
    change_game = State() # –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä
    change_game_for_date = State() # –∏–Ω—Ñ–æ, –∫–æ–ª-–≤–æ –∏–≥—Ä–æ–∫–æ–≤, —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É
    players = State() # –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä
    players_for_date = State() #–î–æ–±–∞–≤–∏—Ç—å, –£–±—Ä–∞—Ç—å, –û–ø–ª–∞—á–µ–Ω–æ?, –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫
    spy = State()
    spy_num_players = State()


def process_name(player):
    if player.status == db_wrapper.Status.unknown:
        suffix = ""
    elif player.status == db_wrapper.Status.paid:
        suffix = " ‚úÖ"
    elif player.status == db_wrapper.Status.new:
        suffix = " üÜï"
    return f"{player.nick:{20}}{suffix}"

def create_inline_buttons(
        allowed_statuses: list,
        identifier: str,
        action: Callable,
        trigger_button: str,
        state_group: State,
        markup: types.ReplyKeyboardMarkup,
        reply_message: str = ".",
):
    async def process_trigger(message: types.Message, state: FSMContext):
        # players, status = db.get_registered_players()
        async with state.proxy() as data:
            date = data[DATE]
        players = await db_wrapper.get_registered_players(date)
        players_buttons = types.InlineKeyboardMarkup()
        for p in players:
            if p.status.value not in allowed_statuses:
                continue
            button_name = process_name(p)
            nickname_button = types.InlineKeyboardButton(button_name, callback_data=f"{p.nick}|{identifier}")
            players_buttons.add(nickname_button)
        await message.reply(
            reply_message,
            reply_markup=players_buttons,
        )

    async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        nick = callback_query.data.split("|")[0]
        async with state.proxy() as data:
            date = data[DATE]
        await action(date=date, nick=nick)
        await bot.send_message(
            callback_query.from_user.id,
            f"""–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞ "{nick}" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.""", reply_markup=markup
        )

    dp.register_message_handler(process_trigger, lambda message: message.text == trigger_button, state=state_group)
    dp.callback_query_handler(lambda c: c.data.endswith(identifier), state=state_group)(process_callback)

def date_to_weekday(date: str):
    weekday = datetime.strptime(date, '%Y-%m-%d').isoweekday()
    return ["–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç", "—Å–±", "–≤—Å"][weekday - 1]


def date_to_info(date: str):
    date = datetime.strptime(date, '%Y-%m-%d')
    weekday = date.isoweekday()
    insertion_weekday = [
        "–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤–æ –≤—Ç–æ—Ä–Ω–∏–∫", "–≤ —Å—Ä–µ–¥—É", "–≤ —á–µ—Ç–≤–µ—Ä–≥", "–≤ –ø—è—Ç–Ω–∏—Ü—É", "–≤ —Å—É–±–±–æ—Ç—É", "–≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ",
    ][weekday - 1]
    insertion_month = [
        '—è–Ω–≤–∞—Ä—è','—Ñ–µ–≤—Ä–∞–ª—è','–º–∞—Ä—Ç–∞','–∞–ø—Ä–µ–ª—è','–º–∞—è','–∏—é–Ω—è','–∏—é–ª—è','–∞–≤–≥—É—Å—Ç–∞','—Å–µ–Ω—Ç—è–±—Ä—è','–æ–∫—Ç—è–±—Ä—è','–Ω–æ—è–±—Ä—è','–¥–µ–∫–∞–±—Ä—è'
    ][date.month - 1]

    return f"""–°–ø–æ—Ä—Ç–∏–≤–∫–∞ {insertion_weekday}, {date.day} {insertion_month}
‚è≥ –°—Ç–∞—Ä—Ç —Å—Ç–æ–ª–∞ - 19:00
üß≠ –ú–µ—Å—Ç–æ: –ú–æ—Ö–æ–≤–∞—è 10 (–≤—Ö–æ–¥ —Å –õ–∏—Ç–µ–π–Ω–æ–≥–æ 11)
üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: 400‚ÇΩ
üï¥Ô∏è–í–µ–¥—É—â–∞—è: –°–µ–ª–µ–Ω–∞ üí™üèª"""


def get_max_number():
    with open("files/max_number.txt") as file:
        return int(file.read())

