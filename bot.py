from aiogram.dispatcher import FSMContext
from aiogram.utils import executor
from admin_logic import *
from utils import process_name


def get_max_number():
    with open("max_number.txt") as file:
        return int(file.read())


@dp.message_handler(state="*", commands='newgame', user_id=[436612042, 334756630])
async def get_game_settings(message: types.Message):
    with open("game_info.txt") as file:
        game_info = file.read()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–µ")
    await message.reply(game_info, reply_markup=types.ReplyKeyboardRemove())
    await Form.change_info.set()


@dp.message_handler(state="*", commands='maxnumber', user_id=[436612042, 334756630])
async def get_current_max_number(message: types.Message):
    max_number = get_max_number()
    await message.reply(f"–¢–µ–∫—É—â–µ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–≥—Ä–æ–∫–æ–≤ {max_number}.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–≥—Ä–æ–∫–æ–≤"
                        , reply_markup=types.ReplyKeyboardRemove())
    await Form.max_number.set()


@dp.message_handler(state=Form.max_number)
async def change_max_number(message: types.Message):
    new_max_number = int(message.text)
    with open("max_number.txt", "w") as file:
        file.write(str(new_max_number))
    await message.reply("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏–≥—Ä–æ–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ", reply_markup=base_markup)
    await Form.start.set()


@dp.message_handler(state=Form.change_info)
async def change_game_settings(message: types.Message):
    game_info = message.text
    with open("game_info.txt", "w") as file:
        file.write(game_info)
    await message.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∏–≥—Ä–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∞", reply_markup=base_markup)
    await Form.start.set()


@dp.message_handler(state="*", commands='reset', user_id=[436612042, 334756630])
async def reset_registration(message: types.Message):
    await message.reply("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é?", reply_markup=yes_no_markup)
    await Form.reset.set()


@dp.message_handler(lambda message: message.text == YES_BUTTON, state=Form.reset)
async def reset_registration_for_sure(message: types.Message):
    db.clear()
    await message.reply("–ë–æ—Ç –≥–æ—Ç–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –∏–≥—Ä—É", reply_markup=base_markup)
    await Form.start.set()


@dp.message_handler(lambda message: message.text == NO_BUTTON, state=Form.reset)
async def cancel_reset_registration(message: types.Message):
    await Form.start.set()
    await message.reply("–û–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=base_markup)


@dp.message_handler(state=None)
async def cmd_start(message: types.Message):
    await Form.start.set()
    await message.reply("""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–ª—É–± –ú–∞—Ñ–∏–∏ "Castellano"! –ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?""", reply_markup=base_markup)


@dp.message_handler(state="*", commands='start')
async def cmd_start(message: types.Message):
    await Form.start.set()
    await message.reply("""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–ª—É–± –ú–∞—Ñ–∏–∏ "Castellano"! –ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?""", reply_markup=base_markup)


@dp.message_handler(lambda message: message.text not in [NEAREST_GAME_BUTTON, MAFIA_BUTTON, BOARD_GAMES_BUTTON], state=Form.start)
async def process_start_invalid(message: types.Message):
    return await message.reply("–ù–∞–∂–º–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –∫–Ω–æ–ø–∫—É.", reply_markup=base_markup)


@dp.message_handler(lambda message: message.text == REGISTRATION_BUTTON, state=Form.nearest_game)
async def register(message: types.Message):
    """
    Conversation's entry point
    """

    if db.id_registered(message.from_user.id):
        nick = db.get_registered_nickname(message.from_user.id)
        await message.reply(f'–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –Ω–∏–∫–æ–º "{nick}".\n\n–•–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å—Å—è —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏?"',
                    reply_markup=yes_no_markup)
        await Form.unregister.set()
    elif db.count_registered_players() >= get_max_number():
        await Form.start.set()
        await message.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –∏–≥—Ä—É –∑–∞–∫—Ä—ã—Ç–∞. –ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–µ!",
                            reply_markup=base_markup)
    else:
        await Form.nickname.set()
        await message.reply("–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –Ω–∏–∫.",
                            reply_markup=cancel_markup)


@dp.message_handler(lambda message: message.text == YES_BUTTON, state=Form.unregister)
async def unregister(message: types.Message, state: FSMContext):
    nick = db.get_registered_nickname(message.from_user.id)
    db.unregister_player(message.from_user.id)
    players_cnt = db.count_registered_players()
    await message.reply(f"–°–Ω—è—Ç–∏–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ.\n–ë–µ–∑ –í–∞—Å –±—É–¥–µ—Ç —Å–∫—É—á–Ω–æ, {nick}! :(", reply_markup=base_markup)
    report_text = f"–ò–≥—Ä–æ–∫ —Å–Ω—è–ª—Å—è —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n–ù–∏–∫–Ω–µ–π–º: {nick}\nUsername: @{message.from_user.username}\n\n–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {get_max_number() - players_cnt}"
    for user_id in [436612042, 334756630]:
        await bot.send_message(user_id, report_text)
    await Form.start.set()


@dp.message_handler(lambda message: message.text == NO_BUTTON, state=Form.unregister)
async def unregister(message: types.Message, state: FSMContext):
    await Form.start.set()
    await message.reply("–û–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=base_markup)


@dp.message_handler(lambda message: message.text == CANCEL_BUTTON, state=[Form.nickname, Form.nearest_game, Form.mafia])
async def cancel_registration(message: types.Message, state: FSMContext):
    await Form.start.set()
    await message.reply("–û–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=base_markup)


@dp.message_handler(state=Form.nickname)
async def process_name_stage(message: types.Message, state: FSMContext):
    with open("game_info.txt") as file:
        game_info = file.read()
    db.register_player(message.text.replace("/", ""), message.from_user.id)
    players_cnt = db.count_registered_players()

    date = game_info.split("\n")[0].split(maxsplit=1)[1]
    time = game_info.split("\n")[1].split(maxsplit=4)[4].split(",")[0]
    address = game_info.split("\n")[2].split(maxsplit=2)[2]
    message_text = f"""–û—Ç–ª–∏—á–Ω–æ, {message.text}! –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –∏–≥—Ä–æ–≤–æ–π –≤–µ—á–µ—Ä –ø–æ –Ω–æ–º–µ—Ä—É +79139422767 –Ω–∞ –°–±–µ—Ä–±–∞–Ω–∫/–¢–∏–Ω—å–∫–æ—Ñ—Ñ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–∏–∫–Ω–µ–π–º–∞"""
#     message_text = f"""–û—Ç–ª–∏—á–Ω–æ, {message.text}! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.\n
# –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥—Ä—É–≥–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @naya_vokhidova\n\n–ñ–¥–µ–º –í–∞—Å {date} –≤ {time} –ø–æ –∞–¥—Ä–µ—Å—É {address}."""
    await message.reply(message_text, reply_markup=base_markup)
    report_text = f"–ò–≥—Ä–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è\n\n–ù–∏–∫–Ω–µ–π–º: {message.text}\n–§–ò–û: {message.from_user.full_name}\nUsername: @{message.from_user.username}\n\n–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {get_max_number() - players_cnt}"
    for user_id in [436612042, 334756630]:
        await bot.send_message(user_id, report_text)
    await Form.start.set()


@dp.message_handler(lambda message: message.text == MAFIA_BUTTON, state=Form.start)
async def process_mafia(message: types.Message, state: FSMContext):
    await message.reply("–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?", reply_markup=mafia_markup)
    await Form.mafia.set()


@dp.message_handler(lambda message: message.text == NEAREST_GAME_BUTTON, state=Form.start)
async def get_next_game_info(message: types.Message, state: FSMContext):
    with open("game_info.txt") as file:
        game_info = file.read()
    participants, status = db.get_registered_players()
    processed_nicks = [process_name(nick, s) for nick, s in zip(participants, status)]
    participants_wrapped = []
    for num, nickname in enumerate(processed_nicks, 1):
        participants_wrapped.append(f"{num}. {nickname}")
    participants_wrapped = "```\n\n" + "\n".join(participants_wrapped) + "```"
    participants_wrapped = "\n\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:\n" + participants_wrapped
    empty_places = f"\n\n–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {get_max_number() - len(participants)}"
    await message.reply(
        game_info + participants_wrapped + empty_places,
        reply_markup=nearest_game_markup,
        parse_mode="Markdown"
    )
    await Form.nearest_game.set()


@dp.message_handler(lambda message: message.text == GESTURES_BUTTON, state=Form.mafia)
async def get_gestures(message: types.Message, state: FSMContext):
    await message.reply_photo(open("gestures.png", 'rb'), reply_markup=mafia_markup)


@dp.message_handler(lambda message: message.text == RULES_BUTTON, state=Form.mafia)
async def get_rules(message: types.Message, state: FSMContext):
    """
    max length of message is 4096
    """
    with open("rules.txt") as f:
        rules = f.read()
    await message.reply(rules, parse_mode="Markdown", reply_markup=mafia_markup)


@dp.message_handler(lambda message: message.text == VOTE_BUTTON, state=Form.mafia)
async def start_voting(message: types.Message):
    text = """–°–æ–≤–µ—Ç—É—é –Ω–∞–∂–∞—Ç—å –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –æ–± —ç—Ç–æ–º —Å–∫–∞–∂–µ—Ç –ì–æ—Å–ø–æ–∂–∞ –í–µ–¥—É—â–∞—è üòâ"""
    await message.reply(text)


@dp.message_handler(lambda message: message.text == BOARD_GAMES_BUTTON, state=Form.start)
async def process_board_games(message: types.Message):
    text = """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç–µ, —Å–∫–æ—Ä–æ –º—ã –±—É–¥–µ–º –∏–≥—Ä–∞—Ç—å –≤ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã! –£–∂–µ –¥–∞–∂–µ –∫–Ω–æ–ø–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Å–¥–µ–ª–∞–ª–∏ üòé"""
    await message.reply(text)


@dp.message_handler(lambda message: message.text == SUBSCRIBE_BUTTON, state=Form.start)
async def add_subscriber(message: types.Message, state: FSMContext):
    if not db.subscriber_exists(message.from_user.id):
        db.add_subscriber(message.from_user)
        await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ü§ó", reply_markup=base_markup)
    else:
        await message.reply("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã üíÅ‚Äç‚ôÄÔ∏è", reply_markup=base_markup)
    await Form.start.set()



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
