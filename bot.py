import logging
import config

import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor

import pickle
import argparse

parser = argparse.ArgumentParser(description='Mafia bot')
parser.add_argument("purpose", help="Mode", default="test", choices={"test", "prod"}, nargs="?")
args = parser.parse_args()

API_TOKEN = config.API_TOKEN_TEST if args.purpose == "test" else config.API_TOKEN_PROD

logging.basicConfig(level=logging.INFO)


bot = Bot(token=API_TOKEN)

# For example use simple MemoryStorage for Dispatcher.
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

MAX_NUMBER = 14
game_info = """–ò–≥—Ä–∞ –≤ —Å—Ä–µ–¥—É, 17 –º–∞—Ä—Ç–∞
‚è≥ –í—Ä–µ–º—è —Å–±–æ—Ä–∞ - 18:00, —Å—Ç–∞—Ä—Ç —Å—Ç–æ–ª–∞ - 18:30
üïµüèª‚Äç‚ôÇÔ∏è 3 –∏–≥—Ä—ã –∑–∞ –≤–µ—á–µ—Ä
üß≠ –ú–µ—Å—Ç–æ: –©–µ—Ä–±–∞–∫–æ–≤ –ø–µ—Ä, 12–∫2, Lounge Bar "111 Metrov"
üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: 300‚ÇΩ

–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
"""


# States
class Form(StatesGroup):
    start = State()
    nickname = State()  # Will be represented in storage as 'Form:nickname'
    unregister = State()
    info = State()
    test = State()

base_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True, one_time_keyboard=False)
base_markup.add("–ü—Ä–∞–≤–∏–ª–∞")
base_markup.add("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
base_markup.add("–ò–Ω—Ñ–æ")

info_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True, one_time_keyboard=False)
info_markup.add("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∏–≥—Ä–µ")
info_markup.add("–ñ–µ—Å—Ç—ã")

@dp.message_handler(state=None)
async def cmd_start(message: types.Message):
    # Configure ReplyKeyboardMarkup

    await Form.start.set()
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ö—Ä—É—Ç–æ, —á—Ç–æ –í—ã –∑–¥–µ—Å—å! –ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=base_markup)

@dp.message_handler(state="*", commands='start')
async def cmd_start(message: types.Message):
    # Configure ReplyKeyboardMarkup

    await Form.start.set()
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ö—Ä—É—Ç–æ, —á—Ç–æ –í—ã –∑–¥–µ—Å—å! –ß—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=base_markup)

@dp.message_handler(lambda message: message.text not in ["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ü—Ä–∞–≤–∏–ª–∞", "–ò–Ω—Ñ–æ"], state=Form.start)
async def process_start_invalid(message: types.Message):
    """
    In this example gender has to be one of: Male, Female, Other.
    """
    return await message.reply("–ù–∞–∂–º–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –æ–¥–Ω—É –∏–∑ 3-–µ—Ö –∫–Ω–æ–ø–æ–∫.")

@dp.message_handler(lambda message: message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", state=Form.start)
async def register(message: types.Message):
    """
    Conversation's entry point
    """

    with open("ids.pkl", "rb") as file:
        ids = pickle.load(file)
    # Set state
    if message.from_user.id in ids:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True, one_time_keyboard=False)
        markup.add("–î–∞", "–ù–µ—Ç")
        await message.reply(f'–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –Ω–∏–∫–æ–º "{ids[message.from_user.id]}".\n\n–•–æ—á–µ—Ç—Å—è —Å–Ω—è—Ç—å—Å—è —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏?"',
                            reply_markup=markup)
        await Form.unregister.set()

    else:
        await Form.nickname.set()
        await message.reply("–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –Ω–∏–∫.",
                            reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(lambda message: message.text == "–î–∞", state=Form.unregister)
async def unregister(message: types.Message, state: FSMContext):
    with open("ids.pkl", "rb") as file:
        ids = pickle.load(file)
    nick = ids[message.from_user.id]
    del ids[message.from_user.id]
    with open("ids.pkl", 'wb') as output:
        pickle.dump(ids, output, pickle.HIGHEST_PROTOCOL)
    with open("participants.pkl", 'rb') as file:
        participants = pickle.load(file)
    index = len(participants) - 1 - participants[::-1].index(nick)
    del participants[index]

    with open("participants.pkl", 'wb') as output:
        pickle.dump(participants, output, pickle.HIGHEST_PROTOCOL)
    await message.reply(f"–°–Ω—è—Ç–∏–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ.\n–ë–µ–∑ –í–∞—Å –±—É–¥–µ—Ç —Å–∫—É—á–Ω–æ, {nick}! :(", reply_markup=base_markup)
    await Form.start.set()

@dp.message_handler(lambda message: message.text == "–ù–µ—Ç", state=Form.unregister)
async def unregister(message: types.Message, state: FSMContext):
    await Form.start.set()
    await message.reply("–û–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=base_markup)

@dp.message_handler(state=Form.nickname)
async def process_name(message: types.Message, state: FSMContext):
    """
    Process user name
    """
    with open("ids.pkl", "rb") as file:
        ids = pickle.load(file)
    ids[message.from_user.id] = message.text
    with open("ids.pkl", 'wb') as output:
        pickle.dump(ids, output, pickle.HIGHEST_PROTOCOL)

    with open("participants.pkl", 'rb') as file:
        participants = pickle.load(file)
    participants.append(message.text)
    with open("participants.pkl", 'wb') as output:
        pickle.dump(participants, output, pickle.HIGHEST_PROTOCOL)
    await message.reply(f"–û—Ç–ª–∏—á–Ω–æ, {message.text}! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.", reply_markup=base_markup)
    await Form.start.set()
    # await state.finish()
    # await Form.next()

@dp.message_handler(lambda message: message.text == "–ò–Ω—Ñ–æ", state=Form.start)
async def get_next_game_info(message: types.Message, state: FSMContext):
    await message.reply("–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?", reply_markup=info_markup)
    await Form.info.set()

@dp.message_handler(lambda message: message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∏–≥—Ä–µ", state=Form.info)
async def get_next_game_info(message: types.Message, state: FSMContext):
    with open("participants.pkl", 'rb') as file:
        participants = pickle.load(file)
    print(message.from_user.id)
    participants_wrapped = []
    for num, nickname in enumerate(participants, 1):
        participants_wrapped.append(f"{num}. {nickname}")
    participants_wrapped = "\n".join(participants_wrapped)
    empty_places = f"\n\n–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: {MAX_NUMBER - len(participants)}"
    await message.reply(game_info + participants_wrapped + empty_places, reply_markup=base_markup)
    await Form.start.set()

@dp.message_handler(lambda message: message.text == "–ñ–µ—Å—Ç—ã", state=Form.info)
async def get_next_game_info(message: types.Message, state: FSMContext):
    await message.reply_photo(open("gestures.png", 'rb'), reply_markup=base_markup)
    await Form.start.set()

@dp.message_handler(lambda message: message.text == "–ü—Ä–∞–≤–∏–ª–∞", state=Form.start)
async def get_rules(message: types.Message, state:FSMContext):
    """
    max length of message is 4096
    """
    with open("rules.txt") as f:
        rules = f.read()
    await message.reply(rules, parse_mode="Markdown")

@dp.message_handler(state=Form.test)
async def process_gender(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['gender'] = message.text

        # Remove keyboard
        markup = types.ReplyKeyboardRemove()

        # And send message
        await bot.send_message(
            message.chat.id,
            md.text(
                md.text('Hi! Nice to meet you,', md.bold(data['name'])),
                md.text('Age:', md.code(data['age'])),
                md.text('Gender:', data['gender']),
                sep='\n',
            ),
            reply_markup=markup,
            parse_mode=ParseMode.MARKDOWN,
        )

    # Finish conversation
    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
