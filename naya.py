from aiogram import types
from asyncio import sleep
from random import choice, randint


async def make_Naya_happy_again(message: types.Message):
    wait = 1
    img = _get_heart_stickers()
    bot_message = await message.answer('.')
    # bot_message = await message.answer('<b>ะะพัะฐ ะฑั ะทะฐะฟะพะผะฝะธัั, ััะพ ั ัะตะฑั ะปัะฑะปั, ัะปะฐะดะบะฐั ๐ </b>', parse_mode="HTML")
    # emojis = ["๐โโ๏ธ", "๐ฉโโค๏ธโ๐โ๐จ", "๐", "๐ฐโโ๏ธ" , "๐คต", "๐", "๐คฐ", "๐คฑ",  "๐จโ๐ฉโ๐ฆ", "๐จโ๐ฉโ๐งโ๐ฆ"]
    # await sleep(2)
    # for e in emojis:
    #     await bot_message.edit_text(e)
    #     await sleep(wait)
    for anim in img:
        await bot_message.edit_text('\n'.join(anim))
        await sleep(0.5)


def _get_heart_stickers():
    return (
        (
            '๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค',
            '๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค',
            '๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค',
            '๐ค๐ค๐ค๐คโค๐ค๐ค๐ค๐ค',
            '๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค',
            '๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค',
            '๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค',
            '๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค',

        ),
        (
            '๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค',
            '๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค',
            '๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค',
            '๐ค๐ค๐คโคโคโค๐ค๐ค๐ค',
            '๐ค๐ค๐ค๐คโค๐ค๐ค๐ค๐ค',
            '๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค',
            '๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค',
            '๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค',
        ),
        (
            '๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค',
            '๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค',
            '๐ค๐คโคโค๐คโคโค๐ค๐ค',
            '๐ค๐คโคโคโคโคโค๐ค๐ค',
            '๐ค๐ค๐คโคโคโค๐ค๐ค๐ค',
            '๐ค๐ค๐ค๐คโค๐ค๐ค๐ค๐ค',
            '๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค',
            '๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค',
        ),
        (
            '๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค',
            '๐ค๐คโคโค๐คโคโค๐ค๐ค',
            '๐คโคโคโคโคโคโคโค๐ค',
            '๐คโคโคโคโคโคโคโค๐ค',
            '๐ค๐คโคโคโคโคโค๐ค๐ค',
            '๐ค๐ค๐คโคโคโค๐ค๐ค๐ค',
            '๐ค๐ค๐ค๐คโค๐ค๐ค๐ค๐ค',
            '๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค๐ค',
        ),
        (
            '๐คโคโคโค๐คโคโคโค๐ค',
            'โคโคโคโคโคโคโคโคโค',
            'โคโคโคโคโคโคโคโคโค',
            'โคโคโคโคโคโคโคโคโค',
            '๐คโคโคโคโคโคโคโค๐ค',
            '๐ค๐คโคโคโคโคโค๐ค๐ค',
            '๐ค๐ค๐คโคโคโค๐ค๐ค๐ค',
            '๐ค๐ค๐ค๐คโค๐ค๐ค๐ค๐ค',
        ),
        (
            'โคโคโคโคโคโคโคโคโค',
            'โคโคโคโคโคโคโคโคโค',
            'โคโคโคโคโคโคโคโคโค',
            'โคโคโคโคโคโคโคโคโค',
            'โคโคโคโคโคโคโคโคโค',
            '๐คโคโคโคโคโคโคโค๐ค',
            '๐ค๐คโคโคโคโคโค๐ค๐ค',
            '๐ค๐ค๐คโคโคโค๐ค๐ค๐ค',
        ),
        (
            'โคโคโคโคโคโคโคโคโค',
            'โคโคโคโคโคโคโคโคโค',
            'โคโคโคโคโคโคโคโคโค',
            'โคโคโคโค๐คโคโคโคโค',
            'โคโคโคโคโคโคโคโคโค',
            'โคโคโคโคโคโคโคโคโค',
            'โคโคโคโคโคโคโคโคโค',
            'โคโคโคโคโคโคโคโคโค',
        ),
        (
            'โคโคโคโคโคโคโคโคโค',
            'โคโคโคโคโคโคโคโคโค',
            'โคโคโคโคโคโคโคโคโค',
            'โคโคโค๐ค๐ค๐คโคโคโค',
            'โคโคโคโค๐คโคโคโคโค',
            'โคโคโคโคโคโคโคโคโค',
            'โคโคโคโคโคโคโคโคโค',
            'โคโคโคโคโคโคโคโคโค',
        ),
        (
            'โคโคโคโคโคโคโคโคโค',
            'โคโคโคโคโคโคโคโคโค',
            'โคโค๐ค๐คโค๐ค๐คโคโค',
            'โคโค๐ค๐ค๐ค๐ค๐คโคโค',
            'โคโคโค๐ค๐ค๐คโคโคโค',
            'โคโคโคโค๐คโคโคโคโค',
            'โคโคโคโคโคโคโคโคโค',
            'โคโคโคโคโคโคโคโคโค',
        ),
        (
            'โคโคโคโคโคโคโคโคโค',
            'โคโค๐ค๐คโค๐ค๐คโคโค',
            'โค๐ค๐ค๐ค๐ค๐ค๐ค๐คโค',
            'โค๐ค๐ค๐ค๐ค๐ค๐ค๐คโค',
            'โคโค๐ค๐ค๐ค๐ค๐คโคโค',
            'โคโคโค๐ค๐ค๐คโคโคโค',
            'โคโคโคโค๐คโคโคโคโค',
            'โคโคโคโคโคโคโคโคโค',
        )
    )

async def make_Naya_happy(message: types.Message):
    words = (
        'ัะดะธะฒะธัะตะปัะฝะฐั', 'ะฒะฝะธะผะฐัะตะปัะฝะฐั', 'ะบัะฐัะธะฒะฐั', 'ะปัััะฐั', 'ััะฟะตัะฝะฐั', 'ะทะฐะฑะพัะปะธะฒะฐั', 'ะผะธะปะฐั', 'ะฟัะตะบัะฐัะฝะฐั',
        'ัะผะฝะฐั', 'ัะธะบะฐัะฝะฐั', 'ะพะฑะฐะปะดะตะฝะฝะฐั', 'ะพัะฐัะพะฒะฐัะบะฐ', 'ะปัะฑะธะผะฐั', 'ะฒะตััะปะฐั', 'ะฝะตะถะฝะฐั', 'ััะบะฐั', 'ะฟัะตะปะตััะฝะฐั',
        'ะฟัะธััะฝะฐั', 'ัะปะฐะดะบะฐั', 'ะดะธะฒะฝะฐั', 'ะฐะฝะณะตะปััะบะฐั', 'ะดะพะฑัะฐั', 'ะฑะตัะฟะพะดะพะฑะฝะฐั', 'ะฒะพะปัะตะฑะฝะฐั', 'ะบัััััะบะฐ', 'ัะผะตะปะฐั',
        'ะปะฐัะบะพะฒะฐั', 'ัะพะผะฐะฝัะธัะฝะฐั', 'ะฒะตะปะธะบะพะปะตะฟะฝะฐั', 'ะฒะฝะธะผะฐัะตะปัะฝะฐั', 'ัััะฐััะฝะฐั', 'ะธะณัะธะฒะฐั', 'ะตะดะธะฝััะฒะตะฝะฝะฐั',
        'ัััะพะนะฝะฐั', 'ะฑะตะทัะผะฝะฐั', 'ัะธะผะฟะฐัะธัะฝะฐั', 'ะธะทััะฝะฐั', 'ัะฐะปะฐะฝัะปะธะฒะฐั', 'ัะปะตะณะฐะฝัะฝะฐั', 'ัััะบะฐั', 'ัะฝะธะบะฐะปัะฝะฐั',
    )
    await __rabbit(message)
    bot_message = await message.answer('<b>ะัะพัะตัะฝัะต ะฝะฐะฟะพะผะธะฝะฐะฝะธั ัะพะณะพ, ััะพ ัั...</b>', parse_mode="HTML")
    await sleep(2)

    for word in words:
        await bot_message.edit_text(f'<b>Cะฐะผะฐั {word}โจ</b>', parse_mode="HTML")
        await sleep(0.5)

    await bot_message.edit_text(f'<b> ะะฐั = the best๐ค</b>', parse_mode="HTML")


async def __rabbit(message: types.Message):
    left_eyes = 'โโโโโโโโ'
    right_eyes = 'โโโฑโโฑโโโ'
    img = [
        'โญโโโฎโญโโโฎ',
        'โฐโโฎโโโญโโฏ',
        'โโญโโโโโฎโ',
        'โโโฑโโฑโโโ',
        'โญโโโโโโโฎ',
        'โฐโโฐโปโโฏโโฏ',
        'โญโโโโโโโฎ',
        'โฐโโโฏโฐโโโฏ',
    ]
    eyes = choice((True, False))
    img[3] = right_eyes if eyes else left_eyes
    bot_message = await play_stroke_anim(message, img)
    await sleep(1)

    for _ in range(randint(5, 10)):
        eyes = not eyes
        img[3] = right_eyes if eyes else left_eyes
        await bot_message.edit_text('\n'.join(img))
        await sleep(0.5)


async def play_stroke_anim(msg: types.Message, anims, tick=0.1):
    bot_message = await msg.answer("ะัะธะฒะตั!")
    for i in range(len(anims)):
        data = "\n".join(anims[0:i + 1])
        await bot_message.edit_text(data)
        await sleep(tick)
    return bot_message