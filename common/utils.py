from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types
from aiogram.dispatcher import FSMContext
from asyncio import sleep
from random import choice, randint

from databases import db_wrapper
from loader import dp, bot
from typing import Callable


DATE = "date"
ADMIN = "–ê–¥–º–∏–Ω"


# States
class Player(StatesGroup):
    start = State() # –ë–ª–∏–∂–∞–π—à–∞—è –∏–≥—Ä–∞, –ú–∞—Ñ–∏—è, –ù–∞—Å—Ç–æ–ª–∫–∏
    select_date = State() # –î–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä
    nickname = State()  # Will be represented in storage as 'Form:nickname'
    unregister = State()
    nearest_game = State()
    mafia = State()
    board_games = State()
    spy = State()

class Admin(StatesGroup):
    change_info = State()
    max_number = State()
    reset = State()
    register_player = State()
    main = State() # –ù–æ–≤–∞—è –∏–≥—Ä–∞, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –º–∞—Ñ–∏—è, —à–ø–∏–æ–Ω
    new_game = State() # –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É, –ò–∑–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É
    create_game = State() # –¥–∞—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã
    change_game = State() # –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä
    change_game_for_date = State() # –∏–Ω—Ñ–æ, –∫–æ–ª-–≤–æ –∏–≥—Ä–æ–∫–æ–≤, —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É
    players = State() # –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä
    players_for_date = State() #–î–æ–±–∞–≤–∏—Ç—å, –£–±—Ä–∞—Ç—å, –û–ø–ª–∞—á–µ–Ω–æ?, –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫
    spy = State()
    spy_num_players = State()


def process_name(player):
    if player.status == db_wrapper.Status.unknown:
        suffix = ""
    elif player.status == db_wrapper.Status.paid:
        suffix = " ‚úÖ"
    elif player.status == db_wrapper.Status.new:
        suffix = " üÜï"
    return f"{player.nick:{20}}{suffix}"

def create_inline_buttons(
        allowed_statuses: list,
        identifier: str,
        action: Callable,
        trigger_button: str,
        state_group: State,
        markup: types.ReplyKeyboardMarkup,
        reply_message: str = ".",
):
    async def process_trigger(message: types.Message, state: FSMContext):
        # players, status = db.get_registered_players()
        async with state.proxy() as data:
            date = data[DATE]
        players = await db_wrapper.get_registered_players(date)
        players_buttons = types.InlineKeyboardMarkup()
        for p in players:
            if p.status.value not in allowed_statuses:
                continue
            button_name = process_name(p)
            nickname_button = types.InlineKeyboardButton(button_name, callback_data=f"{p.nick}|{identifier}")
            players_buttons.add(nickname_button)
        await message.reply(
            reply_message,
            reply_markup=players_buttons,
        )

    async def process_callback(callback_query: types.CallbackQuery, state: FSMContext):
        await bot.answer_callback_query(callback_query.id)
        nick = callback_query.data.split("|")[0]
        async with state.proxy() as data:
            date = data[DATE]
        await action(date=date, nick=nick)
        await bot.send_message(
            callback_query.from_user.id,
            f"""–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞ "{nick}" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.""", reply_markup=markup
        )

    dp.register_message_handler(process_trigger, lambda message: message.text == trigger_button, state=state_group)
    dp.callback_query_handler(lambda c: c.data.endswith(identifier), state=state_group)(process_callback)


def date_to_info(date: str):
    preposition = "–≤–æ" if date.startswith("–≤—Ç–æ—Ä–Ω–∏–∫") else "–≤"
    weekdays = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫,", "–≤—Ç–æ—Ä–Ω–∏–∫,", "—Å—Ä–µ–¥—É,", "—á–µ—Ç–≤–µ—Ä–≥,", "–ø—è—Ç–Ω–∏—Ü—É,", "—Å—É–±–±–æ—Ç—É,", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ,"]
    weekday, day, month = date.split()
    for w in weekdays:
        if w[:3] == weekday[:3]:
            weekday = w
    return f"""–°–ø–æ—Ä—Ç–∏–≤–∫–∞ {preposition} {weekday} {day} {month}
‚è≥ –°—Ç–∞—Ä—Ç —Å—Ç–æ–ª–∞ - 19:00
üß≠ –ú–µ—Å—Ç–æ: –ú–æ—Ö–æ–≤–∞—è 10 (–≤—Ö–æ–¥ —Å –õ–∏—Ç–µ–π–Ω–æ–≥–æ 11)
üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: 400‚ÇΩ
üï¥Ô∏è–í–µ–¥—É—â–∞—è: –°–µ–ª–µ–Ω–∞ üí™üèª"""


async def make_Naya_happy(message: types.Message):
    words = (
        '—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–∞—è', '–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞—è', '–∫—Ä–∞—Å–∏–≤–∞—è', '–ª—É—á—à–∞—è', '—É—Å–ø–µ—à–Ω–∞—è', '–∑–∞–±–æ—Ç–ª–∏–≤–∞—è', '–º–∏–ª–∞—è', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è',
        '—É–º–Ω–∞—è', '—à–∏–∫–∞—Ä–Ω–∞—è', '–æ–±–∞–ª–¥–µ–Ω–Ω–∞—è', '–æ—á–∞—Ä–æ–≤–∞—à–∫–∞', '–ª—é–±–∏–º–∞—è', '–≤–µ—Å—ë–ª–∞—è', '–Ω–µ–∂–Ω–∞—è', '—è—Ä–∫–∞—è', '–ø—Ä–µ–ª–µ—Å—Ç–Ω–∞—è',
        '–ø—Ä–∏—è—Ç–Ω–∞—è', '—Å–ª–∞–¥–∫–∞—è', '–¥–∏–≤–Ω–∞—è', '–∞–Ω–≥–µ–ª—å—Å–∫–∞—è', '–¥–æ–±—Ä–∞—è', '–±–µ—Å–ø–æ–¥–æ–±–Ω–∞—è', '–≤–æ–ª—à–µ–±–Ω–∞—è', '–∫—Ä—É—Ç—ã—à–∫–∞', '—Å–º–µ–ª–∞—è',
        '–ª–∞—Å–∫–æ–≤–∞—è', '—Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∞—è', '–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–∞—è', '–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞—è', '—Å—Ç—Ä–∞—Å—Ç–Ω–∞—è', '–∏–≥—Ä–∏–≤–∞—è', '–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è',
        '—Å—Ç—Ä–æ–π–Ω–∞—è', '–±–µ–∑—É–º–Ω–∞—è', '—Å–∏–º–ø–∞—Ç–∏—á–Ω–∞—è', '–∏–∑—è—â–Ω–∞—è', '—Ç–∞–ª–∞–Ω—Ç–ª–∏–≤–∞—è', '—ç–ª–µ–≥–∞–Ω—Ç–Ω–∞—è', '—á—É—Ç–∫–∞—è', '—É–Ω–∏–∫–∞–ª—å–Ω–∞—è',
    )
    await __rabbit(message)
    bot_message = await message.answer('<b>–ö—Ä–æ—à–µ—á–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–æ–≥–æ, —á—Ç–æ —Ç—ã...</b>', parse_mode="HTML")
    await sleep(2)

    for word in words:
        await bot_message.edit_text(f'<b>C–∞–º–∞—è {word}‚ú®</b>', parse_mode="HTML")
        await sleep(0.5)

    await bot_message.edit_text(f'<b> –ù–∞—è = the bestü§ó</b>', parse_mode="HTML")


async def __rabbit(message: types.Message):
    left_eyes = '‚îà‚îÉ‚ñã‚ñè‚ñã‚ñè‚îÉ‚îà'
    right_eyes = '‚îà‚îÉ‚ï±‚ñã‚ï±‚ñã‚îÉ‚îà'
    img = [
        '‚ï≠‚îÅ‚îÅ‚ïÆ‚ï≠‚îÅ‚îÅ‚ïÆ',
        '‚ï∞‚îÅ‚ïÆ‚îÉ‚îÉ‚ï≠‚îÅ‚ïØ',
        '‚îà‚ï≠‚îõ‚îó‚îõ‚îó‚ïÆ‚îà',
        '‚îà‚îÉ‚ï±‚ñã‚ï±‚ñã‚îÉ‚îà',
        '‚ï≠‚îõ‚ñî‚ñÉ‚ñî‚îà‚îó‚ïÆ',
        '‚ï∞‚îì‚ï∞‚îª‚îÅ‚ïØ‚îè‚ïØ',
        '‚ï≠‚îõ‚îà‚îè‚îì‚îà‚îó‚ïÆ',
        '‚ï∞‚îÅ‚îÅ‚ïØ‚ï∞‚îÅ‚îÅ‚ïØ',
    ]
    eyes = choice((True, False))
    img[3] = right_eyes if eyes else left_eyes
    bot_message = await play_stroke_anim(message, img)
    await sleep(1)

    for _ in range(randint(5, 10)):
        eyes = not eyes
        img[3] = right_eyes if eyes else left_eyes
        await bot_message.edit_text('\n'.join(img))
        await sleep(0.5)

async def play_stroke_anim(msg: types.Message, anims, tick=0.1):
    bot_message = await msg.answer("–ü—Ä–∏–≤–µ—Ç!")
    for i in range(len(anims)):
        data = "\n".join(anims[0:i + 1])
        await bot_message.edit_text(data)
        await sleep(tick)
    return bot_message

